class Solution {
public:
    void dfs(int i, int j, vector<vector<char>>& grid,vector<vector<bool>>& vi){
        vi[i][j]=1;
        //cout<<i<<' '<<j<<endl;
        if(i-1>=0 && grid[i-1][j]=='1' && vi[i-1][j]==0) dfs(i-1,j,grid,vi);
        if(j-1>=0 && grid[i][j-1]=='1' && vi[i][j-1]==0) dfs(i,j-1,grid,vi);
        if(i+1<grid.size() && grid[i+1][j]=='1' && vi[i+1][j]==0) dfs(i+1,j,grid,vi);
        if(j+1<grid[0].size() && grid[i][j+1]=='1' && vi[i][j+1]==0) dfs(i,j+1,grid,vi);

        return ;
    }

    int numIslands(vector<vector<char>>& grid) {
        vector<vector<bool>> vi;
        vector<bool> help (grid[0].size(),0);
        for(int i=0;i<grid.size();i++) vi.push_back(help);
        int ans=0;

        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]=='1' && vi[i][j]==0){
                    ans++;
                    // cout<<i<<' '<<j;
                    dfs(i,j,grid,vi);
                }
            }
        }
        return ans;
    }
};
