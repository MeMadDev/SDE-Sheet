//Coding Ninja
void dfs(int node,vector<bool>& vis,vector<bool>& path,vector<vector<int>> graph,bool & ans){
  vis[node]=1;
  path[node]=1;
  for(auto it:graph[node]){
    if(vis[it]==1 && path[it]==1){
      ans=1;
      return;
    }
    if(vis[it]==0) dfs(it,vis,path,graph,ans);
  }
  path[node]=0;
  return ;
}
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  vector<bool> vis(n,0);
  vector<bool> path(n,0);
  bool ans=0;
  vector<vector<int>> graph(n,vector<int>());
  for(auto it:edges){
    graph[it.first-1].push_back(it.second-1);
  }
  for(int i=0;i<n;i++){
    if(vis[i]==0){
      dfs(i,vis,path,graph,ans);
      if(ans==1) return 1;
    }
  }
  return 0;
}
